#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
File: torn.py
Author: Derek Robati
Email: derek.robati@gmail.com
Github: https://github.com/drobati
Description: A CLI to interface to TORN API.
"""

from __future__ import print_function

import calendar
import click
from datetime import datetime
import json
import re
import requests


class InvalidField(Exception):
    def __init__(self, *args, **kwargs):
        Exception.__init__(self, *args, **kwargs)


class User(object):

    def __init__(self, apikey):
        """Torn User API modeled as a class.

        Args:
            apikey (string): API key from TORN. Required for all API calls.

        """
        self.apikey = apikey
        self.user_fields = [
            'attacks',     'attacksfull',   'bars',      'basic',
            'battlestats', 'bazaar',        'cooldowns', 'crimes',
            'display',     'education',     'events',    'hof',
            'honors',      'icons',         'inventory', 'medals',
            'messages',    'money',         'networth',  'notifications',
            'perks',       'personalstats', 'profile',   'properties',
            'stocks',      'travel',        'workstats'
        ]

    def __getattr__(self, attr):
        """Request field information as an attribute.

        Returns:
            str: Returns string of pretty formatted json response.

        Exception:
            InvalidField: Can raise if attr is not valid.

        """
        if attr in self.user_fields:
            if attr == 'overview':
                sel = ''
            else:
                sel = attr
            payload = {'key': self.apikey, 'selections': sel}
            return requests.get('http://api.torn.com/user/', params=payload)
        else:
            raise InvalidField()


@click.group()
@click.argument('apikey')
@click.pass_context
def torn(ctx, apikey):
    ctx.obj = User(apikey)

@torn.command()
@click.argument('field')
@click.pass_obj
def user(user, field):
    try:
        response = getattr(user, field)
        click.secho(field + ': ', fg="green", bold=True)
        value = json.loads(response.text)
        print(json.dumps(
            value,
            sort_keys=True,
            indent=4,
            separators=(',', ': ')
        ))
    except InvalidField:
        print("No selection from:")
        map(lambda x: print(x), user.user_fields)


@torn.command()
@click.option('--seconds/--no-seconds', default=False, 
              help="Return time in epoch format.")
@click.pass_obj
def hospital(user, seconds):
    response = user.icons
    icons = json.loads(response.text)
    try:
        value = icons["icons"]["icon15"]
    except KeyError:
        value = "00:00:00"
    pattern = re.compile(r'(\d*:\d*:\d*)')
    matches = re.search(pattern, value)
    time = matches.groups()[0]
    if not seconds:
        click.secho("Time Left in Hospital:", fg="green", bold="True")
        print(time)
    else:
        times = map(lambda x: int(x), time.split(':'))
        print(times[0] * 3600 + times[1] * 60 + times[2])

def bar(user, delta, power_name):
    response = user.bars
    bars = json.loads(response.text)
    power = bars[power_name]
    current, maximum = power["current"], power["maximum"]
    if not delta:
        click.secho("%s:" % power_name.capitalize(), fg="green", bold="True")
        print("%s/%s" % (current, maximum))
    else:
        delta = int(maximum) - int(current)
        click.secho("%s" % (delta), fg="green", bold="True")

@torn.command()
@click.option('--delta/--no-delta', default=False, 
              help="Return health left till full.")
@click.pass_obj
def energy(user, delta):
    bar(user, delta, "energy")

@torn.command()
@click.option('--delta/--no-delta', default=False, 
              help="Return health left till full.")
@click.pass_obj
def nerve(user, delta):
    bar(user, delta, "nerve")


if __name__ == "__main__":
    torn()
